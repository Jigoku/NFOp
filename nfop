#!/usr/bin/env perl
# nfop v0.2
# A gtk2/perl based nfo viewer
#
# Copyright (C) 2015 Ricky K. Thomson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# u should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 
use feature ":5.10"; # required for given/when functions
use strict;
use warnings;
use utf8;
use Gtk2 qw(init);
use Gtk2::Pango;
use FindBin qw($Bin); 
use File::Basename;

my $VERSION	= "0.3";
my $data = $Bin . "/data/";
my $xml	= $data . "gui.xml";
my $conf = $ENV{ HOME } . "/.nfop";

my (
	$builder, 
	$window, 
	$filechooser,
	$textview,
	$fontbutton,
	$sb,
	$buffer,
);

# default settings
my 	%settings = (
	"font" 		 => "Monospace 8",
	"background" => "#000000000000",
	"foreground" => "#f000f000f000",
	"width" 	 => 520,
	"height" 	 => 660,
	"statusbar"  => 1
);

my $text = "";

main();



sub main {	
	# read "~/.nfop" settings
	if (-e $conf) {
		open FILE, "<$conf" or die "Could not read config: $!\n";
		for (<FILE>) {
			no warnings;
			# perl 5.10 experimental functions
			given($_) {
				when (m/^font=\"(.+)\"/) { $settings{"font"} = $1; } 
				when (m/^background=\"(.+)\"/) { $settings{"background"} = $1; }
				when (m/^foreground=\"(.+)\"/) { $settings{"foreground"} = $1; }
				when (m/^width=\"(.+)\"/) { $settings{"width"} = $1; }
				when (m/^height=\"(.+)\"/) { $settings{"height"} = $1; }
				when (m/^statusbar=\"(.+)\"/) { $settings{"statusbar"} = $1; }
			}
		}
	}
	
	# check for built in flags
	if ( defined $ARGV[0] ) {
		if ( $ARGV[0] =~ m/(--version|-v)/ ) { print "nfop $VERSION\n"; exit(0); }
		if ( $ARGV[0] =~ m/(--help|-h)/ ) { print "Usage:\t$0 <filename>\n"; exit(0); }
		# TODO; use @ARGV instead, loop, and add "--background|-bg" etc...
	}

	# check libglade xml exists
	if ( ! -e $xml ) { die "Interface: '$xml' $!"; }
	
	$builder = Gtk2::Builder->new();
	
	# load glade XML
	$builder->add_from_file( $xml );

	# get top level object
	$window = $builder->get_object( 'window' );
	$builder->connect_signals( undef );

	# object definitions
	$filechooser = $builder->get_object( 'filechooserdialog' );
	$textview = $builder->get_object( 'textview' );
	$fontbutton = $builder->get_object('fontbutton');
	$sb = $builder->get_object( 'statusbar' );
	$buffer = $textview->get_buffer;
	
	# set font
	set_default_font($settings{"font"});
	
	# set window dimensions
	$window->set_default_size($settings{"width"}, $settings{"height"});

	# apply colour to colour buttons
	$builder->get_object( 'colourbutton_fg' )->set_color(Gtk2::Gdk::Color->parse($settings{"foreground"}));
	$builder->get_object( 'colourbutton_bg' )->set_color(Gtk2::Gdk::Color->parse($settings{"background"}));


	# check for arguments as filename
	my $file = $ARGV[0];
	if (defined $file) { 
		if (-e $file) {
			if (-r $file) {
				load_nfo($file); 
			} else {
				print "No read access."; exit(2); 	
			}
		} else { 
			print "No such file."; exit(2); 	
		}	
	}

	# set the initial textbuffer colours
	set_bg_colour();
	set_fg_colour();

	# is statusbar enabled?
	if ($settings{"statusbar"} == 1) { $sb->show; } else { $sb->hide; }
	
	# draw the window
	$window->show();

	# main loop
	Gtk2->main(); gtk_main_quit();
}

sub on_about_clicked {
	# launch about dialog
	my $about = $builder->get_object( 'aboutdialog' );
	$about->run;
	# make sure it goes away when destroyed
	$about->hide;
}

sub apply_filefilter($$$) {
	#create a file filter
	my ($pattern, $name, $object) = @_;
	
	my $filter = Gtk2::FileFilter->new();
	$filter->add_pattern($pattern);
	$filter->set_name($name);
	$object->add_filter($filter);
}


sub on_openfile_clicked {
	# apply filters
	apply_filefilter("*.nfo", "nfo files", $filechooser);
	apply_filefilter("*", "all files", $filechooser);
	
	# show filechooser
	$filechooser->run;
	
	# make sure it goes away when destroyed
	$filechooser->hide;
}

sub load_nfo($) {
	my $file = shift;
	
	# open the file with codepage 437 encoding
	open FILE, "<:encoding(CP437)", $file or die $!;
	
	# reinitialize
	$text = "";
	
	# update the colour
	set_fg_colour();
	
	while (<FILE>){
		# parse to a string	
		$text .= $_;
		
		# TODO: parse as formatted ansi palette?
		#$text .= scan_char($_);
	}
	close FILE;
	
	# get the text buffer object
	my $buffer = $textview->get_buffer;
	
	# set the textview buffer
	$buffer->set_text($text);
	

	
	# show filename in statusbar
	$builder->get_object( 'status_label' )->set_text(
		basename($file)
	);
}

sub scan_char($) {
	# scan for character code
	my @chars = split(//, shift);
	
	# https://en.wikipedia.org/wiki/Code_page_437#Characters
	binmode STDOUT, ":encoding(CP437)";
	
	#make this global @array of character map
	$hex = chr(0x2588); # "a"
	
	for (my $i=0;$i<=scalar(@chars);$i++) {
		if ($chars[$i] =~ m/$hex/) {
			colour_char($i);
		}
	}
	return join ('',@chars);

}

sub colour_char($) {
	# returns colour code for selected pallete
	# place holder (might not be implemented)
	my $iter = shift;
	my $tag = $buffer->create_tag(
		undef,
		foreground => "#ffffff"
	);
	
	# apply the tag to entire buffer
	my $start = $buffer->get_iter_at_offset ($iter+100);
	my $end = $buffer->get_iter_at_offset ($iter);
	$buffer->apply_tag ($tag, $start, $end);
}

sub on_button_openfile_clicked($) {
	# open the selected file
	$filechooser->hide;
	load_nfo($filechooser->get_filename);
}

sub on_fontbutton_font_set {
	# set the desired font 
	set_textview_font($fontbutton->get_font_name);
	$settings{"font"} = $fontbutton->get_font_name;
}



sub set_textview_font($) {
	# convert font string to font description
	$textview->modify_font(	
		Gtk2::Pango::FontDescription->from_string(
			shift
		)
	);
}

sub set_bg_colour {
	# sets the background colour of the textview widget
	my $colour = $builder->get_object( 'colourbutton_bg' )->get_color->to_string;
	
	# update config var
	$settings{"background"} = $colour;
	
	# background
	$textview->modify_base(
		'normal',
		Gtk2::Gdk::Color->parse($colour)
	);
	
	# padding
	$textview->modify_bg(
		'normal',
		Gtk2::Gdk::Color->parse($colour)
	);
	
}

sub set_fg_colour {
	# not implemented
	my $colour = $builder->get_object( 'colourbutton_fg' )->get_color->to_string;
	
	# update config var
	$settings{"foreground"} = $colour;
	
	# create a tag to hold the custom colour
	# we get segfaults if the tag exists, so this hack
	# just makes a randomly named tag.
	# a tag can already exist if the user selects the same colour twice.....
	
	my $tag = $buffer->create_tag(
		undef,
		foreground => $colour
	);
	
	# apply the tag to entire buffer
	my $start = $buffer->get_iter_at_offset (0);
	my $end = $buffer->get_iter_at_offset (length($text));
	$buffer->apply_tag ($tag, $start, $end);

}

sub set_default_font($) {
	# set the default font
	my $font = shift;
	$fontbutton->set_font_name($font);
	set_textview_font($font);
}

sub on_menuitem_statusbar_activate {	
	# toggle visibility of the statusbar
	if ($sb->visible == 1) {
		$sb->hide_all(); $settings{"statusbar"} = 0;
	} else { 
		$sb->show_all(); $settings{"statusbar"}= 1;
	}
}

sub on_menuitem_copy_activate {
	# create a clipboard object
	my $clipboard =  Gtk2::Clipboard->get(Gtk2::Gdk->SELECTION_CLIPBOARD);
	
	# set selected text to the clipboard
	my $buffer = $textview->get_buffer;
	$buffer->copy_clipboard($clipboard);
}

sub on_window_check_resize {
	# update config values for saving on exit
	($settings{"width"}, $settings{"height"}) = $window->get_size;
}

sub write_config($) {
	# write the changed settings to ~/.nfop config
	my $file = shift;
	open FILE, ">$file" or die "Could not open config: $!\n";
	print FILE "# nfop $VERSION - user settings\n";
	print FILE "font=\"".$settings{"font"}."\"\n";
	print FILE "background=\"".$settings{"background"}."\"\n";
	print FILE "foreground=\"".$settings{"foreground"}."\"\n";
	print FILE "width=\"".$settings{"width"}."\"\n";
	print FILE "height=\"".$settings{"height"}."\"\n";
	print FILE "statusbar=\"".$settings{"statusbar"}."\"\n";
	close FILE;
}

sub gtk_main_quit {
	# store changed settings
	write_config($conf);
	
	# cleanup and exit
	$window->destroy;
	
	# bye bye
	Gtk2->main_quit();
	exit(0);
}


#EOF#


