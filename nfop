#!/usr/bin/env perl
# nfop v0.2
# A gtk2/perl based nfo viewer
#
# Copyright (C) 2015 Ricky K. Thomson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# u should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use utf8;

use Gtk2 qw(init);
use Glib qw(TRUE FALSE);
use FindBin qw($Bin); 
use File::Basename;

my $version	= "0.3";
my $data = $Bin . "/data/";
my $xml	= $data . "gui.xml";
my $conf = $ENV{ HOME } . "/.nfop";

my (
	$builder, 
	$window, 
	$filechooser,
	$textview,
	$fontbutton,
	$sb,
	$buffer,
	$conf_bg,
	$conf_fg,
	$conf_font,
	$conf_w,
	$conf_h,
	$conf_sb,
);

my $text = "";

# create the default user config
if ( ! -e $conf ) { 
	print "creating config: " . $conf . "\n"; 
	open FILE, ">", $conf or warn $!; 
	print FILE "font=\"Monospace 8\"\n";
	print FILE "bg=\"#000000000000\"\n";
	print FILE "fg=\"#f000f000f000\"\n";
	print FILE "w=\"520\"\n";
	print FILE "h=\"660\"\n";
	print FILE "statusbar=\"1\"\n";
	close FILE;
}

load_config();
main();
gtk_main_quit();


sub load_config {
	# read "~/.nfop" settings
	open FILE, "<$conf" or die "Could not read config: $!\n";
	foreach my $line (<FILE>) {
		if ($line =~ m/^font=\"(.+)\"/) { $conf_font = $1; } 
		if ($line =~ m/^bg=\"(.+)\"/) { $conf_bg = $1; }
		if ($line =~ m/^fg=\"(.+)\"/) { $conf_fg = $1; }
		if ($line =~ m/^w=\"(.+)\"/) { $conf_w = $1; }
		if ($line =~ m/^h=\"(.+)\"/) { $conf_h = $1; }
		if ($line =~ m/^statusbar=\"(.+)\"/) { $conf_sb = $1; }
	}
}

sub main {
	
	# check for built in flags
	if ( defined $ARGV[0] ) {
		if ( $ARGV[0] =~ m/(--version|-v)/ ) { print "nfop $version\n"; exit(0); }
		if ( $ARGV[0] =~ m/(--help|-h)/ ) { print "Usage:\t$0 <filename>\n"; exit(0); }
	}

	# check libglade xml exists
	if ( ! -e $xml ) { die "Interface: '$xml' $!"; }

	
	$builder = Gtk2::Builder->new();
	
	# load glade XML
	$builder->add_from_file( $xml );

	# get top level object
	$window = $builder->get_object( 'window' );
	$builder->connect_signals( undef );

	# object definitions
	$filechooser = $builder->get_object( 'filechooserdialog' );
	$textview = $builder->get_object( 'textview' );
	$fontbutton = $builder->get_object('fontbutton');
	$sb = $builder->get_object( 'statusbar' );
	$buffer = $textview->get_buffer;
	
	#font
	set_default_font($conf_font);
	
	$window->set_default_size($conf_w, $conf_h);

	# apply colour to colour buttons
	$builder->get_object( 'colourbutton_fg' )->set_color(Gtk2::Gdk::Color->parse($conf_fg));
	$builder->get_object( 'colourbutton_bg' )->set_color(Gtk2::Gdk::Color->parse($conf_bg));


	# check for arguments as filename
	my $file = $ARGV[0];
	if (defined $file) { 
		if (-e $file) {
			if (-r $file) {
				load_nfo($file); 
			} else {
				print "No read access."; exit(2); 	
			}
		} else { 
			print "No such file."; exit(2); 	
		}	
	}

	# set the initial textbuffer colours
	set_bg_colour();
	set_fg_colour();

	# is statusbar enabled?
	if ($conf_sb == 1) { $sb->show; } else { $sb->hide; }
	
	# draw the window
	$window->show();

	# main loop
	Gtk2->main();
}

sub on_about_clicked {
	# launch about dialog
	my $about = $builder->get_object( 'aboutdialog' );
	$about->run;
	# make sure it goes away when destroyed
	$about->hide;
}

sub create_filefilter($$) {
	#create a file filter
	my ($pattern, $name) = @_;
	
	my $filter = Gtk2::FileFilter->new();
	$filter->add_pattern($pattern);
	$filter->set_name($name);
	$filechooser->add_filter($filter);
}


sub on_openfile_clicked {
	create_filefilter("*.nfo", "nfo files");
	create_filefilter("*", "all files");
	$filechooser->run;
	
	# make sure it goes away when destroyed
	$filechooser->hide;
}

sub load_nfo($) {
	my $file = shift;
	
	# open the file with codepage 437 encoding
	open FILE, "<:encoding(CP437)", $file or die $!;
	
	# reinitialize
	$text = "";
	
	while (<FILE>){
		# parse to a string
		$text .= $_;
	}
	
	close FILE;
	
	my $buffer = $textview->get_buffer;
	
	# set the textview buffer
	$buffer->set_text($text);
	
	# update the colour
	set_fg_colour();
	
	# show filename in statusbar
	$builder->get_object( 'status_label' )->set_text(
		basename($file)
	);
}

sub on_button_openfile_clicked($) {
	$filechooser->hide;
	load_nfo($filechooser->get_filename);

}

sub on_fontbutton_font_set {
	set_textview_font($fontbutton->get_font_name);
	$conf_font = $fontbutton->get_font_name;
}



sub set_textview_font($) {
	# convert font string to font
	$textview->modify_font(	
		Gtk2::Pango::FontDescription->from_string(
			shift
		)
	);
	

}

sub set_bg_colour {
	# sets the background colour of the textview widget
	my $colour = $builder->get_object( 'colourbutton_bg' )->get_color->to_string;
	
	# update config var
	$conf_bg = $colour;
	
	# background
	$textview->modify_base(
		'normal',
		Gtk2::Gdk::Color->parse($colour)
	);
	
	# padding
	$textview->modify_bg(
		'normal',
		Gtk2::Gdk::Color->parse($colour)
	);
	
}

sub set_fg_colour {
	# not implemented
	my $colour = $builder->get_object( 'colourbutton_fg' )->get_color->to_string;
	
	# update config var
	$conf_fg = $colour;
	
	# create a tag to hold the custom colour
	# we get segfaults if the tag exists, so this hack
	# just makes a randomly named tag.
	
	my $tag = $buffer->create_tag(
		rand(10000)."_foreground", 
		foreground => $colour
	);
	
	# apply the tag to entire buffer
	my $start = $buffer->get_iter_at_offset (0);
	my $end = $buffer->get_iter_at_offset (length($text));
	$buffer->apply_tag ($tag, $start, $end);

}

sub set_default_font($) {
	# set the default font
	my $font = shift;
	$fontbutton->set_font_name($font);
	set_textview_font($font);
}

sub on_menuitem_statusbar_activate {	
	# toggle visibility of the statusbar
	if ($sb->visible == 1) {
		$sb->hide_all(); $conf_sb = 0;
	} else { 
		$sb->show_all(); $conf_sb = 1;
	}
}

sub on_menuitem_copy_activate {
	# create a clipboard object
	my $clipboard =  Gtk2::Clipboard->get(Gtk2::Gdk->SELECTION_CLIPBOARD);
	
	# set selected text to the clipboard
	my $buffer = $textview->get_buffer;
	$buffer->copy_clipboard($clipboard);
}

sub on_window_check_resize {
		($conf_w, $conf_h) = $window->get_size;
}

sub gtk_main_quit {
	# store changed settings
	open FILE, ">$conf" or die "Could not open config: $!\n";
	print FILE "font=\"$conf_font\"\n";
	print FILE "bg=\"$conf_bg\"\n";
	print FILE "fg=\"$conf_fg\"\n";
	print FILE "w=\"$conf_w\"\n";
	print FILE "h=\"$conf_h\"\n";
	print FILE "statusbar=\"$conf_sb\"\n";
	close FILE;
	
	# cleanup and exit
	$window->destroy;
	
	Gtk2->main_quit();
	exit(0);
}


#EOF#


